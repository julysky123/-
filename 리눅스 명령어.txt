두개이상의 명령어 ;
화면 지우기 clear , ctrl+l
히스토리 : 위아래
터미널 종료 exit
작업디렉토리 보기 pwd
디렉터리 내용 출력 ls
-l 디렉터리 내용 자세히 출력
-a 숨긴거까지 모두 출력
-la
ls -l 파일명 : 해당 파일 정보 출력
ls -l 디렉토리명: 해당 디렉토리 내의 파일 자세히 출력
ls -ld 디렉터리 자체의 정보 출력
-F 디렉토리는 이름끝에 / 추가
-r 리버스
-t 수정시간을 오름차순으로 정렬
-R 하위디렉터리 순회

-cd 작업 디렉터리 이동
.. 이전
. 현재 디렉토리
~ : 자신의 홈디렉토리로 이동
또는 그냥 cd만 써도 된다
cd - : 이전 작업 디렉터리.
/ : 루트 디렉터리



-cat :파일출력. 파일은 반드시 텍스트파일.
-n 옵션 : 줄번호와 같이 출력하고 싶은경우
-b 옵션 : 비어있지 않은 줄에만 행 번호를 출력하고 싶은경우

-more
스페이스바 다음페이지
b : 이전페이지
엔터 한줄 아래
q 종료

-less
space, pagedown, f : 다음페이지
b, pageup : 이전페이지
위쪽 방향키, k: 한줄 위
아래쪽 방향 키, j : 한줄 아래
G: 문서 마지막
g: 문서 처음
q; 종료
/문자열 ; 아래로 이동하면서 문자열 탐색


head/tail 파일명
head/tail -n 3 파일명
tail -f mylog.log 파일에 대한 변화를 실시간으로 확인가능.

nano editor.txt

sort 각 행의 첫 문자를 대상으로 정렬 수행.
-n : 수로 한정해 정렬
-k 특정 열을 기준으로 정렬, 열 번호는 1부터
-t 공백이네 탭이 아닌 다른 문자를 구분자로 사용해 열을 나눌 때 사용
-r 내림차순
-f 대소구분을 하지 않는다.
-b 앞의 공백을 무시

wc 그냥 쓰면 문자 행 단어 개수 순으로 출력
-c 문자개수만
-l 행의 개수만
-w 단어 개수만

file 파일의 정보를 확인하는 명령어. file hello.txt

echo 문자열 : 문자열을 화면에 출력
echo * 현재 디렉터리 내의 모든 파일 출력.
echo *.txt txt만

?: 임의의 한문자.
[] 특정범위의 문자 또는 문자 집합에서 하나.
[!0-9] 숫자를 제외한 나머지.
[![:digit:]] 숫자를 제외한 나머지

touch a.txt
mkdir dir1 dir2 dir3...
rmdir dir1 dir2 dir3... (비어있는거만 지움)

rm file1 file2
-i 확인 yn
-v 삭제 완료 메세지 출력
-f 없으면 무시
-r 재귀적으로 하위디렉터리의 모든 파일 디렉터리 삭제.
rm -rf mkdir
rm -rf *   -> 자살각

cp 파일명1 파일명2
cp 파일명1 파일명2.. 디렉터리
-i 기존 파일 덮어쓰기전 확인메세지 (안쓰면 그냥 덮어씀)
-r 디렉터리와 그 하위의 모든 내용 복사. (디렉터리 복사용. cp -r dir1 dir2 : dir2가 없으면 생성.)
cp dir1/* dir2 : dir1 안의 모든 파일을 dir2에 복사 단 dir2가 있어야함
-u 파일을 복사할 때, 목적지에 파일이 없거 -> 뭔소리임.
-v 복사완료 메세지 출력

mv 파일명1 ... 디렉터리명
mv 디렉터리명1 디렉터리명2
mv 파일명1 파일명2 -> 파일명1을 2로 바꾼다.
mv file dir: file을 디렉터리로 이동하는데 dir안에도 file이 있을경우 덮어씌운다.

명령어 구분.
1. 프로그래밍 언어
2. 셸이 자체적으로 제공하는 내장 명령어 ex
3. 셸 함수
4. 별칭

type 명령어 : 명령어의 종류를 확인할 때 사용하는 명령어
1. help cd or cd --help
[] : 생략가능한 옵션 |: 둘중 하나의 옵션만 선택

프로그램 파일 또는 명령어
명령어 -h or 명령어 --help

man [SECTION] 명령어; 종료는 q(단축키)
1. 사용자 명령어에 대한 도움말 -> 관리자가 가장 많이 사용하는 섹션
2. System Call API
3. C Library API ->2,3은 개발도구를 설치해야만 볼 수 있다.
4. 특수파일
5. 파일 포멧
6. 게임, 미디어파일
7. 그외
8. 시스템 관리용 명령어

default : 1

명령어 종료 코드 : 정상종료 0
문제가 발생한 경우 128+시그널넘버
echo $?

백그라운드 : 사용자의 입력을 받지 않고 bash 뒤에서 실행되는 개념. &를 뒤에 붙여서 실행
포그라운드. fg로 전환

명령어 > 파일명 : 출력 리다이렉션 ls -la> result.txt
여러개 리다이렉션 : (date; cal; pwd)>result.txt
>>를 사용하면 기존 파일을 삭제하지 않고 그 뒤에 덧붙여 저장한다.

cat의 다른 용법. 2개의 파일을 연결
cat text.txt > text.out  text.txt의 내용을 text.out에 저장
cat >hello.txt : 표준입력을 파일로 전송


오류 리다이렉션 : 명령어 2>파일명
/dev/null : 비트 버킷. 아무런 동작을 수행하지 않는곳

입력 리다이렉션 : 명령어 < 파일명
cat <a.txt > a_copy.txt

here documents : <<종료식별자

명령어 <<종료식별자
문자열
...
...
..

종료식별자

cat << MYEND
akjdfka
dfakdck
MYEND  





